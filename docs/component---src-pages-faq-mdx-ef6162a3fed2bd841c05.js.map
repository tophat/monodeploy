{"version":3,"file":"component---src-pages-faq-mdx-ef6162a3fed2bd841c05.js","mappings":"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","sources":["webpack://@monodeploy/gatsby/./src/pages/faq.mdx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {Layout as MDXLayout} from \"../components/Layout\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    em: \"em\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"faq\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#faq\",\n    \"aria-label\": \"faq permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"FAQ\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"can-monodeploy-be-used-without-yarn-modernberry\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#can-monodeploy-be-used-without-yarn-modernberry\",\n    \"aria-label\": \"can monodeploy be used without yarn modernberry permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Can Monodeploy be used without Yarn Modern/Berry?\"), \"\\n\", React.createElement(_components.p, null, \"No. Monodeploy uses Yarn Modern's public API to do most of the heavy lifting in reading and writing to your project.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"can-i-use-monodeploy-for-non-javascript-projects\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#can-i-use-monodeploy-for-non-javascript-projects\",\n    \"aria-label\": \"can i use monodeploy for non javascript projects permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Can I use monodeploy for non-JavaScript projects?\"), \"\\n\", React.createElement(_components.p, null, \"Yes. The only requirement is that you organize your project using Yarn Berry (i.e. Yarn v3+). You can create a minimal Yarn project by creating a root \", React.createElement(_components.code, null, \"package.json\"), \" and then one \", React.createElement(_components.code, null, \"package.json\"), \" per package/workspace. In this scenario, you likely want to use the \\\"No Registry\\\" mode.\"), \"\\n\", React.createElement(_components.p, null, \"Although designed for publishing to NPM, you can disable all npm interactions by passing in a \", React.createElement(_components.code, null, \"--registry-mode manifest\"), \" flag to the CLI or setting \", React.createElement(_components.code, null, \"registryMode\"), \" to \", React.createElement(_components.code, null, \"manifest\"), \" in your config file. A registry mode of \", React.createElement(_components.code, null, \"manifest\"), \" will set the package.json of each workspace as the source of truth for versions. This means when reading package versions, the package.json is used instead of reading from NPM. Likewise, package publishing to npm is also disabled. If using the \\\"Manifest\\\" registry mode, you should also enable \", React.createElement(_components.code, null, \"--persistVersions\"), \" (\", React.createElement(_components.code, null, \"persistVersions\"), \") and commit the modified package.json files to your repository, otherwise there's no proper reference for the package versions.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"how-can-i-preview-changes-before-publishing\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#how-can-i-preview-changes-before-publishing\",\n    \"aria-label\": \"how can i preview changes before publishing permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"How can I preview changes before publishing?\"), \"\\n\", React.createElement(_components.p, null, \"You can run:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"yarn monodeploy --dry-run --changeset-filename=-\\n\")), \"\\n\", React.createElement(_components.p, null, \"to implicitly disable logs and only output the changeset data. This is useful for previewing changes or determining which packages will be modified from a Pull Request.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"packages-i-havent-modified-are-being-published-with-a-patch-version-bump-whats-going-on\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#packages-i-havent-modified-are-being-published-with-a-patch-version-bump-whats-going-on\",\n    \"aria-label\": \"packages i havent modified are being published with a patch version bump whats going on permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Packages I haven't modified are being published with a patch version bump, what's going on?\"), \"\\n\", React.createElement(_components.p, null, \"In addition to the version strategies associated with packages explicitly modified via your commits, what we call the \", React.createElement(_components.em, null, \"explicit version strategies\"), \", Monodeploy will also perform a patch version strategy bump to all dependent packages, what we call \", React.createElement(_components.em, null, \"implicit version strategies\"), \". The idea behind this is that when you run tests and do development in your monorepo, you are always working with the \", React.createElement(_components.em, null, \"latest\"), \" packages. Therefore if Package-A depends on Package-B and Package-B has been modified, we also want to release a version of Package-A where Package-A's version range for Package-B has been increased. This Package-A that a downstream project consumes will then be guaranteed to be using the same version of Package-B that is used in the monorepo itself.\"), \"\\n\", React.createElement(_components.p, null, \"As an added benefit, downstream projects using systems like Renovate or Dependabot, will also receive updates for Package-A that will bring in the updated Package-B.\"), \"\\n\", React.createElement(_components.p, null, \"If there is a use case where you believe this behaviour is does not make sense, please open an issue and we'll be glad to discuss.\"), \"\\n\", React.createElement(_components.p, null, \"Note that when using package groups (equivalent of Lerna's fixed mode), the highest version strategy from among each group is chosen. In this case, you may find a dependent package with a minor or even major version bump, assuming such a strategy exists for an intentional bump within said group.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"how-does-monodeploy-handle-private-packages\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#how-does-monodeploy-handle-private-packages\",\n    \"aria-label\": \"how does monodeploy handle private packages permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"How does Monodeploy handle private packages?\"), \"\\n\", React.createElement(_components.p, null, \"Private packages, i.e. packages containing a \", React.createElement(_components.code, null, \"private: true\"), \" field in their manifest, are includes as part of dependency graph traversal and in determining version strategies, but are not published to any registry. Monodeploy filters out private packages from git tag creation as well.\"), \"\\n\", React.createElement(_components.p, null, \"Note that the top level workspace is a special case. It is neither published, nor considered part of the dependency graph. In other words, all dependency paths are terminated at the top level workspace rather than traverse through this workspace.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"how-can-i-manually-trigger-a-release-ie-ignore-commits\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#how-can-i-manually-trigger-a-release-ie-ignore-commits\",\n    \"aria-label\": \"how can i manually trigger a release ie ignore commits permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"How can I manually trigger a release (i.e. ignore commits)?\"), \"\\n\", React.createElement(_components.p, null, \"Monodeploy is intended to be entirely automated based on semantic commits. As a result we have not prioritized any manual modes. If manual releases are what you prefer, you may be more interested in the official Yarn Version Plugin. Otherwise, feel free to open a GitHub issue to discuss.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"how-can-i-achieve-behaviour-similar-to-lernas-fixed-version-mode\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#how-can-i-achieve-behaviour-similar-to-lernas-fixed-version-mode\",\n    \"aria-label\": \"how can i achieve behaviour similar to lernas fixed version mode permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"How can I achieve behaviour similar to Lerna's fixed version mode?\"), \"\\n\", React.createElement(_components.p, null, \"Starting in Monodeploy v3, fixed version mode can be achieved by setting the \", React.createElement(_components.code, null, \"packageGroupManifestField\"), \" in your monodeploy configuration, or via the CLI argument. This config option should be set to some field in each workspace's manifest file to indicate fixed version grouping. For example, you can add a \\\"group\\\" field set to \\\"components\\\" for some workspaces and \\\"utils\\\" for other workspaces. Monodeploy will then ensure all workspaces with changes (or dependent changes) in the \\\"components\\\" group have the same version bump. To achieve fixed versioning of all workspaces, you need to specify a field that all workspaces have in common. You can also enforce this with the use of the Yarn Constraints plugin.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"how-does-monodeploy-differ-from\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#how-does-monodeploy-differ-from\",\n    \"aria-label\": \"how does monodeploy differ from permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"How does Monodeploy differ from:\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"lerna\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#lerna\",\n    \"aria-label\": \"lerna permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Lerna\"), \"\\n\", React.createElement(_components.p, null, \"Unlike Lerna, Monodeploy was designed with Yarn Berry support from the ground up and is optimized for Yarn monorepos. In terms of raw functionality, Monodeploy supports a workflow where versions are \", React.createElement(_components.em, null, \"not\"), \" committed back to the git repository. This is useful when it is not feasible to commit back to a repository in CI (for example when using a tool such as Jenkins with many concurrent developers working in a project).\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"yarns-version-plugin\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#yarns-version-plugin\",\n    \"aria-label\": \"yarns version plugin permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Yarn's Version Plugin\"), \"\\n\", React.createElement(_components.p, null, \"At a high level, Monodeploy is meant for entirely automated workflows, whereas Yarn's version plugin takes a more hands on approach. Monodeploy started out as a Lerna replacement to solve some issues we were having internally with Lerna, and so Lerna's features were the ones we were striving to attain parity with. Read through the Yarn Version Plugin documentation and decide which workflow you prefer, there will be pros and cons to either.\"));\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","div","h3","p","code","pre","em","h4","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","MDXLayout"],"sourceRoot":""}