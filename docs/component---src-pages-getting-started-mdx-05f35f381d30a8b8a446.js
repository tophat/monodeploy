"use strict";(self.webpackChunk_monodeploy_gatsby=self.webpackChunk_monodeploy_gatsby||[]).push([[530],{7897:function(e,n,l){l.r(n);var t=l(5300),a=l(9742),o=l(8440);function r(e){const n=Object.assign({h2:"h2",a:"a",div:"div",p:"p",ul:"ul",li:"li",code:"code",pre:"pre",ol:"ol",h3:"h3",h4:"h4"},(0,t.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h2,{id:"getting-started",style:{position:"relative"}},a.createElement(n.a,{href:"#getting-started","aria-label":"getting started permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Getting Started"),"\n",a.createElement(n.p,null,"Monodeploy supports projects with the following minimum requirements:"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"Node v18.12.0"),"\n",a.createElement(n.li,null,"Yarn Modern (v4.0.0)"),"\n",a.createElement(n.li,null,"Git 2.13"),"\n"),"\n",a.createElement(n.p,null,"Install ",a.createElement(n.code,null,"monodeploy"),":"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-bash"},"yarn add -D monodeploy\nyarn monodeploy --dry-run\n")),"\n",a.createElement(n.p,null,"Edit your project's root ",a.createElement(n.code,null,"package.json"),":"),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,'Set "workspaces": ["packages/*"] (you can use a different glob to match your monorepo layout)'),"\n",a.createElement(n.li,null,"Create a ",a.createElement(n.code,null,"monodeploy.config.js")," file and set it to:"),"\n"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-js"},"module.exports = { preset: 'monodeploy/preset-recommended' }\n")),"\n",a.createElement(n.p,null,"You'll be extending this file as you make changes to your project's publish configuration."),"\n",a.createElement(n.ol,{start:"3"},"\n",a.createElement(n.li,null,"If your packages require a compilation step (e.g. TypeScript, Babel), do this in a 'prepack' lifecycle hook per workspace. For more information about when prepack is called, ",a.createElement(n.a,{href:"./architecture#lifecycle-scripts"},"see Lifecycle Scripts"),"."),"\n"),"\n",a.createElement(n.p,null,"For help with the CLI options:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-bash"},"yarn monodeploy --help\n")),"\n",a.createElement(n.p,null,"or see the ",a.createElement(n.a,{href:"./configuration"},"Configuration")," page for more details."),"\n",a.createElement(n.h3,{id:"api",style:{position:"relative"}},a.createElement(n.a,{href:"#api","aria-label":"api permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"API"),"\n",a.createElement(n.p,null,"Monodeploy supports both a Command Line Interface, as well as a Node API."),"\n",a.createElement(n.h4,{id:"cli",style:{position:"relative"}},a.createElement(n.a,{href:"#cli","aria-label":"cli permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"CLI"),"\n",a.createElement(n.p,null,"For the CLI, use the ",a.createElement(n.code,null,"--help")," flag for a list of options."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-bash"},"yarn monodeploy --help\n")),"\n",a.createElement(n.p,null,"If you are okay with the defaults, you can go ahead and add a call to monodeploy to your CI's publish stage:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-bash"},"yarn monodeploy --push\n")),"\n",a.createElement(n.p,null,"If you omit ",a.createElement(n.code,null,"--push"),", you can manually push the tags on success:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-bash"},"yarn monodeploy && git push --tags\n")),"\n",a.createElement(n.p,null,"Or to give things a try first, run monodeploy in dry run mode with verbose logging. Dry run mode won't modify the remote registry, or git."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-bash"},"yarn monodeploy --dry-run --log-level 0\n")),"\n",a.createElement(n.p,null,"The CLI provides a few sensible defaults, however if using the Node API, you will have to provide all relevant information."),"\n",a.createElement(n.p,null,"You can also pass a ",a.createElement(n.code,null,"--config-file")," flag to load options from a configuration file. The file should export an object matching the MonodeployConfiguration interface (with all properties as optional). CLI flags take precedence over the configuration file."),"\n",a.createElement(n.p,null,"Example config file:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-js"},"module.exports = {\n    dryRun: false,\n    git: {\n        commitSha: 'HEAD',\n        remote: 'origin',\n        push: true,\n    },\n    conventionalChangelogConfig: '@tophat/conventional-changelog-config',\n    access: 'infer',\n    persistVersions: false,\n    changesetIgnorePatterns: ['**/*.test.js'],\n}\n")),"\n",a.createElement(n.h4,{id:"node-api",style:{position:"relative"}},a.createElement(n.a,{href:"#node-api","aria-label":"node api permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Node API"),"\n",a.createElement(n.p,null,"To use the API:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ts"},"import type { MonodeployConfiguration }  from '@monodeploy/types'\nimport monodeploy from '@monodeploy/node'\n\nconst config: MonodeployConfiguration = {\n    cwd: process.cwd(),\n    dryRun: false,\n    git: {\n        commitSha: 'HEAD',\n        remote: 'origin',\n        push: true,\n    },\n    conventionalChangelogConfig: '@tophat/conventional-changelog-config',\n    access: 'infer',\n    persistVersions: false,\n}\nconst changeset = await monodeploy(config)\n")),"\n",a.createElement(n.p,null,"Note that configuration presets are not supported when using the Node API."),"\n",a.createElement(n.h3,{id:"changelog",style:{position:"relative"}},a.createElement(n.a,{href:"#changelog","aria-label":"changelog permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Changelog"),"\n",a.createElement(n.p,null,"If you choose to use the ",a.createElement(n.code,null,"--changelog-filename CHANGELOG.md")," flag or related API config property, in your CHANGELOG.md file you'll need to insert a marker to let monodeploy know where to insert the changelog entries. For example:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-md"},"# My Example Changelog\n\nSome blurb here.\n\n\x3c!-- MONODEPLOY:BELOW --\x3e\n\n## v1.0.0\n\nSome entry.\n")),"\n",a.createElement(n.p,null,"The marker ",a.createElement(n.code,null,"\x3c!-- MONODEPLOY:BELOW --\x3e")," must match exactly. It is whitespace and case-sensitive."),"\n",a.createElement(n.p,null,"You can use the template variable ",a.createElement(n.code,null,"<packageDir>")," to create individual changelogs per package, like so:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-bash"},'--changelog-filename "<packageDir>/CHANGELOG.md"\n')))}n.default=function(e){return void 0===e&&(e={}),a.createElement(o.A,e,a.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-pages-getting-started-mdx-05f35f381d30a8b8a446.js.map